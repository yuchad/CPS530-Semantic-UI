The student will creatively apply the material learned in core courses to a significant problem.
An introductory programming course designed to introduce fundamental Computer Science concepts such as abstraction, modelling and algorithm design. Emphasis is placed on producing correct software. This course uses Java as its programming language.
This course is an introduction to computer science, computers and programming for science students. Topics covered include: algorithmic thinking, computational approaches to solving problems, programming fundamentals such as elementary data structures, arrays, and basic constructs provided by high-level programming languages: sequencing, selection, iteration, and functions. Additional topics may include: numerical computation, GUI interface, and case studies of scientific computing. This course uses MATLAB as its programming language.
The C programming language is used to develop good programming techniques. Topics covered include: C program form, language statements, pseudo-code algorithmic representation, numeric data types, flow of control with selection and repetition, standard C libraries, functions and call modes, arrays, pointers, sorting, matrix operations, character and string data types, dynamic storage, structures and linked lists, file I/O. Only regular first year students from the Faculty of Engineering, Architecture, and Science may preregister for this course.
A continuation of 
This course introduces the students to the principles and fundamentals of digital system design. Topics covered include: Binary numbers, base conversions, signed numbers, Boolean algebra, logic gates, K-map method, combinational circuits, decoders/encoders, multiplexers, sequential circuits, flip-flops, state diagram, registers, counters and addressing techniques.
Introduction to data structures and algorithms. Topics may include ADTs, restricted lists (stacks and queries), generalized lists, trees, searching, sorting, hashing, graphs, algorithm design, complexity analysis, recursion.
A continuation of 
This course further explores the Object-Oriented paradigm emphasizing the Object Model and relationships between the various artifacts. The pure Smalltalk language is introduced to reinforce the OO paradigm. The Unified Modeling Language to capture the objects, classes, and their relationships is studied in considerable depth with a major analysis and initial design project done in teams. A reasonably complete coverage of C++ is presented. Time permitting, OO features of other languages will be discussed.
Introduction to Object-Oriented Paradigm and Programming. Graphical User Interfaces. Event driven Paradigm and Programming. Java programming language and Java applets.
Use of computer graphics for scientists. Software and hardware specifications. Psychological and physiological considerations. Mathematical manipulation of 2-D and 3-D graphical objects, representation of 3-D shapes, lines and curves. Digital imagery manipulation, bitmap-based and vector-based graphics. Graphic realism using ray-tracing and fractal geometry techniques. Introduction to virtual reality. Software applications will include a professional digital imagery package and 3-D image modelers.
Implementation of database information systems. Topics include database concepts, data modeling, relational model, normal forms (up to 3NF), relational algebra, data entry, table relationships, form design, queries, SQL / QBE programming and report generation. Use of a relational database management system.
The course covers various aspects of the C language such as: Arrays, strings, pointers, structures, etc. The second part of the course introduces UNIX operating systems. Topics include: I/O, redirection, processes, shell scripts, etc.
This course introduces the study of Object-Oriented software engineering. Topics include software project management, requirements gathering, requirements analysis, modeling, design, implementation and testing. UML diagrams and design patterns are also discussed. A major portion of the course is a team project, taking a system from the initial requirements to the final implementation. (2 hr Lab every other week).
Introduction to data structures and algorithms. Topics include ADTs, restricted lists (stacks and queries), generalized lists, trees, searching, sorting, hashing, graphs, algorithm design, introductory complexity analysis, recursion.
Introduction to analysis, management, and visualization of cellular information at the molecular level. The course includes an overview of mathematical modeling and simulation, pattern matching, methods for phylogenetics, gene recognition, distributed and parallel biological computing, designing and managing biological databases (both relational and object-oriented), linking disparate databases and data, data mining, reasoning by analogy, hypothesis formation and testing by machine.
A survey of major programming paradigms. Discussion of data typing, program decomposition, scoping rules, control structures parameter passing. In addition, several small but useful languages are introduced, such as Python, Ruby and ML.
An introduction to the fundamentals of automatic control systems as applied to computer controlled process operations. Feedback and feedforward concepts, transfer functions, and system response. Frequency response analysis and design with computer simulation. State Space methods for multivariable systems, controllability, observability, Optimal control and Stability.
Advanced file management techniques involving fundamentals of database organization, design and management. Emphasis is given to Relational Database Management Systems including relational algebra, normal Forms, physical Database Structures and their implementation, and Relational Database Languages. Other types of Database Managers are also discussed such as Hierarchical, Network and Inverted Files.
Software and hardware considerations in computer graphics. Mathematical manipulation of graphical objects; interactive graphics and the user interface; representation of 3-D shapes; fundamental implementation of algorithms.
Introduction to computing and programming for non-computer science majors. This course introduces the student to computers and the mind set of computing how to solve problems by developing algorithms and writing programs. The programming language is Python, and the problems are taken from the domain of multimedia (manipulation of images and sounds).
This course presents the concepts and applications of component-based Web programming. Part 1 of the course covers the creation of Web pages to hold the components (XHTML, CSS). Part 2 covers the concepts and applications of server-side programming (CGI, SSI, Perl). Part 3 covers the development of components in Java (Java Applets, JavaBeans). Part 4 introduces activeX components.
Introduction to O/S (system calls, interrupts, synchronous and asynchronous traps, O/S structure), using processes (process communication and synchronization), primitive communications (signals and signal management calls), pipes, messages, semaphores, shared memory, memory management, file systems, and (time permitting) remote procedure calls.
This course provides introduction to semantic technologies, including W3C recommended languages for developing ontologies. First, basics of formal logic are reviewed. Second, XML, RDF and RDF Schema are discussed. Third, description logics are introduced. Fourth, syntax and semantics of OWL2 are discussed, including distinction between fragments of OWL2. Fifth, basics of rule interchange languages RIF are introduced. Additional topics can be discussed if time permits.
An advanced overview of computer architecture and organization. A study of the relationship between software and hardware and how this affects the design of architectural features: instruction execution, processor internals (including pipelining, parallelism and microcode). Instruction sets, memory and caches, busses, auxiliary storage (disk) controllers and vector processors.
An introductory course in the design and implementation of autonomous vehicles. Topics will include the nature of autonomy and autonomous behaviour. Issues involving sensing and actuation will be discussed. Students will be introduced to the constraints and issues involved in building systems designed to interact with an environment independently. Students will be expected to construct working robots.
Transformations of Relational to Network and Hierarchical Models and vice versa. Embedded DB languages, Concurrency Control, Recovery Procedures, Security and Integrity of DBS. Transaction Processing. Database Machines, Front-end Subsystems, Admin. Facilities. Distributed Databases: Concurrency Control through Locking, and Recovery. Also, discussed: The Nested Relational Model, The Semantic DB Model, The O-O DB Model and the Logic Based/Expert DB Systems.
This course introduces the concepts of human-computer interaction and usability testing. Topics include: human information processing, usability principles, models of interaction, user interface paradigms, design of user interfaces. Students will also learn how to develop Graphical User Interfaces using a specific User Interface Management system. (2 hr. Lab every other week).
This course introduces students to scanning and parsing and the theory of computation that supports these activities. Topics include: regular expressions and languages, finite state automata, scanning, context-free languages, pushdown automata, parsing, Turing machines, computability, and NP-completeness.
Order notations, the greedy method, job scheduling, correctness, exchange argument, divide and conquer techniques, recurrence equations, the master method, integer multiplications, dynamic programming, matrix chain-product, the knapsack problem, graph algorithms (minimum spanning trees, single-source shortest paths, all-pairs shortest paths), text processing and pattern matching techniques, approximation algorithms.
Multimedia data is becoming increasingly important in many scientific and commercial arenas. In this course, students will be introduced to principles and current technologies of multimedia system design. Topics include: multimedia data representation, processing multimedia visual information, video and audio compression, retrieval of multimedia data, such as text, graphics, colour images and video. In addition, issues related to multimedia hardware and software as well as specific applications will be discussed.
This course is a follow up to 
History and examples of computer crime. Security policies and mechanisms. Access control models. Implementation and usability issues. Physical security. Authentication technologies. Operating system security. Encryption algorithms and protocols. External and internal firewalls. Software flaws and malware. Ethical issues in computer security. Sample privacy noncompliance litigation cases, Social implications of computing networked communication.
This course will discuss why computers and computation are ubiquitous in our world and the implications of that ubiquity, including security, gaming, military, GPS, social-networks, stock-trading, voting, and beyond. Students will learn how these systems work at an appropriate level of detail. To give a deeper understanding of these topics a significant component of the course will be student programming labs to explore simple versions of these systems. No previous programming experience will be required. 
Internet, the network edge, the network core, delay, loss and throughput, protocol layers. Application Layer: principles of network applications, web. Transport Layer -UDP, connection oriented transport TCP, TCP congestion control. Network layer -The internet protocol (IP): Forwarding and addressing in the Internet. Routing algorithms. The link layer and local area networks.
This course introduces the topics of verification and validation of computer software. Material covered may include statistical and functional approaches to testing, test data analysis, testability, static analysis techniques, dynamic analysis techniques, selected state-of-the-art results, and real-world applications.
Introduction to modern compiler design: theory, techniques, and tools. Students will develop an interpreter or compiler. Assembler and preprocessors will also be briefly discussed.
